def greetings():  # Функция "приветствие".
    print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
    print("~~~Добро пожаловать в игру!~~~")
    print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
    print("~~Первое значение - № строки~~")
    print("~~Второе значение - № столбца~")
    print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
    print('')

def playing():  # Функция, чтобы у игры было визуальное игровое поле и к клеткам можно было обращаться по их индексам.
    print(f"  | 0 | 1 | 2 |")
    print(f"---------------")
    print(f"0 | {playing_fld[0][0]} | {playing_fld[0][1]} | {playing_fld[0][2]} |")
    print(f"---------------")
    print(f"1 | {playing_fld[1][0]} | {playing_fld[1][1]} | {playing_fld[1][2]} |")
    print(f"---------------")
    print(f"2 | {playing_fld[2][0]} | {playing_fld[2][1]} | {playing_fld[2][2]} |")
    print(f"---------------")
    print('')

def ask():
    while True:
        cell = input("Введите координаты, через пробел куда хотите сходить: ").split() # Прошу человека ввести значение и при помощи метода split() разделяю строку на подстроки.

        if len(cell) != 2: # Проверяю, чтобы после разделения строки на подстроки, значений было всего 2.
            print("Введите 2 значения.")
            continue # Если значений больше, то программа пропустит весь последующий код и вернется в начало.

        x, y = cell # Присваиваю переменными x и у значение переменной cell.

        if not (x.isdigit()) or not (y.isdigit()): # При помощи метода isdigit() проверяю, чтобы в переменных х и у были только числа.
            print("Введите только 2 числа.")
            continue # Если в переменных х и у есть какие-либо другие символы, то программа пропусти весь последующий код и вернется к началу.

        x, y = int(x), int(y) # После проверки перевожу обе переменные из класса str в int.

        if 0 > x or x > 2 or 0 > y or y > 2: # Проверяю находится ли координанта в поле игры.
            print("Данная координата находится вне поля.")
            continue # Если введенные данные вне поля игры, программа пропусти последующий код и вернется к началу.

        if playing_fld[x][y] != " ": # Проверяю занята ли клетка на игровом поле.
            print("Данная координата уже имеет значени.")
            continue # Если клетка занята, программа вернется к началу.

        print("Отличный ход!")
        print(' ')
        return x, y

def win_combo(): # Функция с выигрышными компбинациями.
    meaning = [
        ((0, 0), (0, 1), (0, 2)), ((1, 0), (1, 1), (1, 2)),
        ((2, 0), (2, 1), (2, 2)), ((0, 0), (1, 0), (2, 0)),
        ((0, 1), (1, 1), (2, 1)), ((2, 0), (2, 1), (2, 2)),
        ((0, 0), (1, 1), (2, 2)), ((2, 0), (1, 1), (0, 2))
    ]

    for i in meaning: # Проверка на то, что данные координаты, которые указал игрок имеют один символ или крестик или нолик.
        q = i[0]
        w = i[1]
        e = i[2]

        if playing_fld[q[0]][q[1]] == playing_fld[w[0]][w[1]] == playing_fld[e[0]][e[1]] != " ":
            print(f"~~~~~~~~~~~~ {playing_fld[q[0]][q[1]]} WIN! ~~~~~~~~~~~~")
            print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
            print("~~~~~~~~~~ Поздравляю ~~~~~~~~~~")
            return True
    return False

greetings()

playing_fld = [  # Создаю игровое поле при помощи списка списков.
    [" ", " ", " "],
    [" ", " ", " "],
    [" ", " ", " "]
]

move = 0 # Создал переменную шаг.

while True: # Бесконечный цикл.
    move += 1 # Значение переменной буде увеличиваться на один с кажддым проходом цикла.

    playing() # Вызываю функцию, которая показывает игровое поле.

    if move % 2 == 1: # Если шаг не четный ходит Х, если четный ходит 0.
        print("Ходит 'X'")
    else:
        print("Ходит '0'")

    x, y = ask() # Присваиваю переменным значение получнное при вызове функциии.

    if move % 2 == 1: # Если шаг не четный, то в игровое поле по указанным координатам ставится Х, если наоборот - 0.
        playing_fld[x][y] = "X"
    else:
        playing_fld[x][y] = "0"

    if win_combo(): # Вызвал функцию проверку выигрышных комбинаций.
        break

    if move == 9: # Если нет победной комбинации на поле и кол-во ходов достигло 9, будет ничья.
        print("--Ничья--")
        print("--------")
        print("<<GAME>>")
        print("<<OVER>>")
        break